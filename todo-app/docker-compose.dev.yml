services:
  app:
    image: todo-frontend-app-dev
    build:
      context: ./todo-frontend # set the frontend directory as build directory 
      dockerfile: dev.Dockerfile # use this file located in the above directory
    volumes:
      - ./todo-frontend:/usr/src/app # bind LOCAL frontend directory to CONTAINER src/app directory
    # ports: # ports can be removed!
    #   - 3001:3000
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080/api/ # you could use the .env file instead
      - WDS_SOCKET_PORT=8080 # this is needed or web sockets errors occur - it allows hot refresh
    container_name: todo-frontend-app-dev
  nginx:
    image: nginx:1.20.1
    volumes:
      # bind mount local conf file to container
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro # ro = read only
    ports: # keep ports for nginx config
      - 8080:80 # port 80 is set in nginx.dev.conf ... the 8080 local ports means backend should connect to 8080/api
    container_name: reverse-proxy

    depends_on:
      - app
  mongo:
    image: mongo
    #ports: # ports can be removed!
    #  - 3456:27017 # 3456 exposed on host machine, but container is listening to 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      #These variables, used in conjunction, create a new user and set that user's password. This user is created in the admin authentication database and given the role of root, which is a "superuser" role.
      MONGO_INITDB_DATABASE: the_database
      #tell MongoDB to create a database with that name. 
    volumes:
      #bind mount the init file
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      #bind mount the db itself so local copy matches
      - ./todo-backend/mongo_data:/data/db
  redis:
    image: redis
    #ports: # ports can be removed!
    #  - 6379:6379
    command: [ 'redis-server', '--appendonly', 'yes' ] # Overwrite the CMD
    volumes:
      # Declare the volume for persiting data
      - ./todo-backend/redis_data:/data
  backend:
    image: todo-backend-dev
    build:
      context: ./todo-backend # set the frontend directory as build directory 
      dockerfile: dev.Dockerfile # use this file located in the above directory
    volumes:
      - ./todo-backend:/usr/src/app # bind LOCAL backend directory to CONTAINER src/app directory
    depends_on:
      - mongo
      - redis
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database # @localhost:3456 vs @mongo:27017 .... server service connects to mongo service @ container port 27017
